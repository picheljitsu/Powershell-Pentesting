class Scanner
{
    $StartPath   
    $HostFiles   
    $PortFiles   
    $Ports       
    $Targets     
    $Alives      
    $Results     
    $TaskList    
    $DebugLogFile
    $TaskTimeOut 
    $ThreadCount 
    $ThreadList
    $ConfPath
    $isCompleted
    $Debug

    Scanner()
    {
        #Need configs class/method
        $this.StartPath    = $PSScriptRoot
        $this.HostFiles    = [System.Collections.Generic.List[String]]::new()
        $this.PortFiles    = [System.Collections.Generic.List[String]]::new()
        $this.Targets      = [System.Collections.Generic.List[String]]::new()
        $this.Alives       = [System.Collections.Generic.List[String]]::new()
        $this.Ports        = [System.Collections.Generic.List[Int]]::new()         
        $this.Results      = [hashtable]::new()
        $this.TaskList     = [System.Collections.Generic.List[System.Threading.Tasks.Task]]::new()
        $this.DebugLogFile = [String]::Empty
        $this.TaskTimeOut  = 1000
        $this.ThreadCount  = 10000
        $this.Debug        = $True
        $this.ConfPath     ='scans'
        $this.ResultFile
        $this.isCompleted  =$False
    }

    Scanner($FilePath)
    {
        $FullPath = [System.IO.Path]::Combine($this.StartPath, $FilePath)
        $this.HostFile.Add([System.IO.Path]::GetFullPath($FullPath))

        if([System.IO.File]::Exists($this.HostFile))
        {
            $this.LoadTargets()
        }
    }
    Scanner($HostFile, $FilePath)
    {
    }
    [void]DebugLog($Message)
    {
        if($this.Debug)
        {
            [console]::WriteLine($Message)
        }
    }
    [Bool]WaitTasks()
    {
        [System.Threading.Tasks.Task[System.Threading.Tasks.Task]]::WaitAll(
            $this.Tasklist,
            $this.TaskTimeOut
            )
        return $true
    }
    [hashtable]GetResults()
    {
        if($this.Results.keys.count)
        {
            return $this.Results
        }

        $this.WaitTasks()
        $this.DebugLog("All tasks completed.")
        $Tasks = $this.TaskList

        for($i=0; $i -lt $Tasks.count; $i++)
        {   
            $Status = $Tasks[$i].Result.Status
            if($Status -eq 'Success')
            {
                $this.Results.Add(
                    $Tasks[$i].Result.address.IPAddressToString, 
                    $Status
                    )
            }
        }
        return $this.Results
    }
    [array]GetAlives()
    {
        $this.DebugLog("Retrieving all alive targets...")
        $this.GetResults()
        $this.Alives = $this.Results.GetEnumerator().name
        $this.DebugLog(("Alive targets: {0:d}" -f $this.Alives.count))

        return $this.Alives
    }
    [void]AddHostFile([String[]]$FullPaths)
    {
        for($i=0;$i -lt $FullPaths.count;$i++)
        {
            $File = $FullPaths[$i]
            [console]::WriteLine($this.StartPath)
            $FilePath = [System.IO.Path]::Combine($this.StartPath,$File)                      
            $NormalizedPath = [System.IO.Path]::GetFullPath($FilePath)                        
            $this.HostFiles.Add($NormalizedPath)
            [console]::WriteLine("Added host file $NormalizedPath")
        }
    }
    [void]AddPortFile([String[]]$FullPaths)
    {
        if($this.PortFile)
        {
            $this.LoadFile($this.PortFile)
        }
        else
        {
            $this.DebugLog("No port files found. No ports could be loaded.")
        }
    }
    [void]LoadTargets()
    {      
        if($this.HostFiles)
        {
            $this.DebugLog("Loading $($this.HostFiles.count) file")
            $ListContent = $this.LoadFile($this.HostFiles)
            $this.DebugLog("Found $($ListContent.count) Targets")
            $this.Targets.AddRange($ListContent )
        }
        else
        {
            $this.DebugLog("No host files found. No targets could be loaded.")
        }
    }
    [System.Collections.Generic.List[String]]LoadFile([String[]]$FileName)
    {
        $FileContent = [System.Collections.Generic.List[String]]::new()

        for($x=0; $x -lt $FileName.count; $x++)
        {                
            $File = $FileName[$x]
            $this.DebugLog("Loading targets from $File...")
            $FileContent.AddRange([String[]][System.IO.File]::Readlines($File))
            $this.DebugLog("Loaded $File")
        }

        $this.DebugLog("Loaded $($FileContent.count) target(s)")
        return $FileContent 
    }
    [void]LoadPorts()
    {
        if($this.PortFile)
        {
            $this.LoadFile($this.PortFile)
        }
        else
        {
            $this.DebugLog("No port files found. No ports could be loaded.")
        }
    }
    [Void]AddTask($Task)
    {
    }
    [Void]Run($Object, $MethodName, $Params)
    {      
        $Caller = $Object.GetMethod($MethodName)
        [console]::WriteLine($this.TargetList.count)

        for($i=0; $i -lt $this.TargetList.count; $i++)
        {
            $Caller.Invoke($this.TargetList[$i],$Params)
        }

        $this.WaitTasks()
    }
    [System.IO.FileInfo]WriteResults($OutputPath)
    {
        $ResultPath = [System.IO.Path]::Combine($PSScriptRoot,$OutputPath)
        $NormalizedPath = [System.IO.Path]::GetFullPath($ResultPath)
        [string[]]$Output = $this.GetAlives() 

        $this.DebugLog("Writing results to file...")

        if([System.IO.File]::Exists($NormalizedPath))
        {
            [System.IO.File]::AppendAllLines($NormalizedPath, $Output) 
        }
        else
        {
            [System.IO.File]::WriteAllLines($NormalizedPath ,$Output)
        }
        $this.ResultFile = $NormalizedPath
        $this.DebugLog("Wrote $($Output.Count) lines to $NormalizedPath.")

        return [System.IO.FileInfo]::new($NormalizedPath)
    }
    [System.IO.FileInfo]SaveAs($OutFile)
    {
        return $this.WriteResults($OutFile)       
    }
    [System.IO.FileInfo]Save()
    {
        $ScansPath = [System.IO.Path]::Combine($PSScriptRoot,$this.ConfPath)

        if([System.IO.Directory]::Exists($ScansPath))
        {
            $fDateTime = [datetime]::now.ToString("yyyy_MM_dd_hhmmss")
            $FileName = "{0:s}_{1:s}.txt" -f @($fDateTime, 'scan')
            $OutputPath = [System.IO.Path]::Combine($ScansPath,$FileName)
        }
        else
        {
            $this.DebugLog("Couldn't find scans directory. No work saved.")
            return $Null
        }
        return $this.WriteResults($OutputPath)
    }
}

class PingScan : Scanner
{
    #Need to abstract this class/create icmp class
    #debug handler class?

    $StartPath 
    $Debug
    $Alives = [System.Collections.Generic.List[string]]::new()

    PingScan()
    {
        $this.StartPath = $PSScriptRoot   
        $this.Debug = $True
        $this.Alives = [System.Collections.Generic.List[string]]::new()
    }

    PingScan($FilePaths)
    {       
        $this.StartPath = $PSScriptRoot   
        $this.Debug = $True
        $this.Alives = [System.Collections.Generic.List[string]]::new()

        $this.AddHostFile($FilePaths)
        if($this.HostFiles)
        {
            $this.LoadTargets()
        }
    }

    [void]DebugLog($Message)
    {
        if($this.Debug)
        {
            [console]::WriteLine($Message)
        }
    }

    [Void]SendPings()
    {       
        if($this.Targets)
        {
            $TargCount = $this.Targets.Count
            $this.DebugLog("Sending pings to $TargCount targets...")                
            $this.PingTask($this.Targets)
            $this.GetResults()
        }
        else
        {
            $this.DebugLog("No targets set.")
        }        
    }

    [void]PingTask($TargetHosts)
    {
        $Threads = [System.Threading.Tasks.Task[System.Threading.Tasks.Task]]

        for($i=0; $i -lt $TargetHosts.count;$i++ )
        {
            #$PingO = 
            $this.TaskList.add(
                [System.Net.NetworkInformation.Ping]::new().SendPingAsync(
                    $TargetHosts[$i], $this.TaskTimeOut
                    )
                ) 
        }

        $this.DebugLog("All tasks started")
    }
}


<############################################################ 
    BEGIN TESTS 
############################################################>    

#Function is shit. needs work
function Test-Class($Object,$Method,$Params=$null)
{
    $FailMessage = "[!] Test failed."
    $GoodMessage = "[+] Test Succeeded."
    $TestMessage = @("[*] Testing")
    $TestMessage += "Class: [$($Object.name)]"

    if($Method)
    {
        $TestMessage +=  "Method: $Method"
    }
    
    if($Params)
    {
        $TestMessage +=  "Parameter count: $($Params.count)"
    }

    $FormatMessage = "{0}" -f ($TestMessage -join " --> ")
         
    write-host $FormatMessage -ForegroundColor Cyan
    
    try
    {
        if(!$Method)
        {     
            write-host "[+] No method specified" -ForegroundColor Cyan   
            write-host "[*] Creating class object" -ForegroundColor Cyan   
            $Instance = $Object::new()
            write-host "[+] Class object instantiated" -ForegroundColor Cyan  
        }
        if($Method -and !$Params)
        {
            write-host "[*] Creating class object..." -ForegroundColor Cyan 
            $Instance = $Object::new()
            write-host "[+] Class object instantiated." -ForegroundColor Cyan 
            write-host "[*] Calling method $Method" -ForegroundColor Cyan  
            $Null = $Instance::$Method() 
            write-host "[+] Class object method called." -ForegroundColor Cyan  
        }
        if($Method -and $Params)
        {
            write-host "[*] Calling method $Method" -ForegroundColor Cyan 
            $Null = $Object::$Method($($Params -join ''))  
            write-host "[+] Class object instantiated." -ForegroundColor Cyan                          
        }
        write-host $GoodMessage -f Green
        return
    }
    catch
    {
        write-host $FailMessage -f Red
        return
    }
}
########## Tests ##########
#ToDo: Can't do follow-on test w/shit function

#Test-Class $([PingScan]) 'new' 
#Test-Class $([PingScan]) 'new' "C:\hosts.txt"


####### T1
1..254 | % { "8.8.8.$_" } > C:\hosts.txt
$Pinger = [PingScan]::new('C:\hosts.txt')
$Pinger.SendPings()
$Pinger.GetResults()
"******* Results ******"
$Pinger.Results
"******* Alives ******"
$Pinger.Alives
